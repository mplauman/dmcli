name: Build and Release

# This workflow handles building release artifacts and creating releases.
# It runs after the CI workflow completes successfully to ensure all
# quality checks pass before building release artifacts.

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches: [main]
  push:
    tags: ["v*"]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'push' }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary: dmcli
          - os: macos-latest
            target: x86_64-apple-darwin
            binary: dmcli
          - os: macos-latest
            target: aarch64-apple-darwin
            binary: dmcli
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary: dmcli.exe
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Strip binary (Unix only)
        if: matrix.os != 'windows-latest'
        run: strip target/${{ matrix.target }}/release/${{ matrix.binary }}

      - name: Create archive (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p dist
          tar -czf dist/dmcli-${{ matrix.target }}.tar.gz -C target/${{ matrix.target }}/release ${{ matrix.binary }}

      - name: Create archive (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir -p dist
          powershell Compress-Archive -Path target/${{ matrix.target }}/release/${{ matrix.binary }} -DestinationPath dist/dmcli-${{ matrix.target }}.zip

      - name: Upload artifacts (Unix)
        if: matrix.os != 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: dmcli-${{ matrix.target }}
          path: dist/dmcli-${{ matrix.target }}.tar.gz

      - name: Upload artifacts (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: dmcli-${{ matrix.target }}
          path: dist/dmcli-${{ matrix.target }}.zip

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dmcli-x86_64-unknown-linux-gnu/dmcli-x86_64-unknown-linux-gnu.tar.gz
            dmcli-x86_64-apple-darwin/dmcli-x86_64-apple-darwin.tar.gz
            dmcli-aarch64-apple-darwin/dmcli-aarch64-apple-darwin.tar.gz
            dmcli-x86_64-pc-windows-msvc/dmcli-x86_64-pc-windows-msvc.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
